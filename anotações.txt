Passo a Passo - Webpack Alura

npm install
npm run start(rodar o projeto)

Browser - na aba Network
Ctrl + R, para verificar os modulos do JS.

Instalação dos arquivos do webpack(versao do curso)

npm install webpack @5.28.0 --save-dev

em modo de desenvolvimento

Instalação do CLI

npm install webpack-cli@4.5.0 --save-dev

Colocar o script para rodar o webpack.

build-dev

Realizando um caminho absoluto,para rodar o path = 'dist'

const path = require('path')

path.resolve(__dirname,'app/dist')

Webpack, precisa saber se é modo de desenvolvimento ou modo de produção

usando o parâmetro no package.json

--mode development

Gerando um HTML, para a pasta dist.

Utilizando o plugin HTML webpack plugin

todo plugins, que importar dentro da configuração, importar dentro do webpack.config

Classe sempre com a primeira letra MAISCULA, pois está usando o operador 'new'

Vai ser gerado um 'index',porém aqui tem a necessidade de ser um 'app.html'

Comando para colocar o plugin

npm install html-webpack-plugin@5.3.1 –save-dev

depois fazer a variável, com as configuração no webpack

Passar parâmetros para o construtor HtmlWebpackPlugin

Mostrando aonde está o template do .html e o filename.

Gerar a pasta 'dist' e apagar toda vez que é gerado.

No 'output', clean:true.

Invalidando cache

No plugin, hash:true

Quando carregar o bundle.js, se ficar em cache, e tiver uma alteração é recarregado o js novamente.


Resolvendo o CSS.

Usando outro plugin, instalando 

npm install copy-webpack-plugin@8.1.0 --save-dev

Fazer a importação no webpack.config

pasta e destino de origem

patterns 
{
from (qual pasta eu copio), 
to (para onde vai a pasta)
}

Com React, projeto no webpack

Tratar como modulos, esse arquivos com o gerenciador npm.

- instalar o bootstrap por npm

npm install bootstrap@4.6.0 --save

Sem ser em desenvolvimento, pois vai ser visualizado no projeto final.

Tratar Css como modulo.

Importar o bootstrap no app.js 
como modulo.
E no node_modules, vai ser a importação.

trantando com o CSS-Loader,para importar o css nos arquivos.

npm install css-loader@5.2.0 --save-dev

Configurar no webpack.config
usar com a expressão regular, mostrando quando terminar em .css, usar o loader, que é o css-loader.

module:{
rules:[{
test: /\.css$/, use:['css-loader']'
}]
}

Dessa maneira, o css foi apenas para o bundle.js

Necessário usar outro plugin para resolver isso.

Configurar o style-loader

npm install style-loader@2.0.0 --save-dev

Essa instalação é para transformar o que foi para o js, voltar para o html como style.css

no 'use', coloca o style-loader

Adicionando CSS,como bundle.css, para não ocorrer no JS.

Instalação de um plugin

npn install mini-css-extract-plugin@1.4.0 –save-dev

Fazer a const, do plugin

No lugar do 'style-loader', chamar a classe que criei, junto com o '.loader'

para otimização.


Build de produção.

No package.json
chamar de 'build-prod'

--mode production

Serve para compactar e otimizar melhor o bundle.js

Otimização para produção do CSS.

Instalação de um plugin

npm install css-minimizer-webpack-plugin@1.3.0 –save-dev

fazer a importação com const

para otimização não vai ficar em plugin e sim em uma chave especial

optimization:{
minimize: true,
minimizer:[new 'nome do plugin classe'
}














